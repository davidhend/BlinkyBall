int clockPin = 13; //IC Pin 11, Yellow Jumper
int dataPin = 11; //IC Pin 14, Blue Jumper
int latchPin = 8; //IC Pin 12, Green Jumper

const int xPin = 2;     // X output of the accelerometer
const int yPin = 3;     // Y output of the accelerometer

word patterns[176] = {
  0b1100000000000000,
  0b0110000000000000,
  0b0011000000000000, 
  0b0001100000000000, 
  0b0000110000000000, 
  0b0000011000000000, 
  0b0000001100000000, 
  0b0000000110000000, 
  0b0000000011000000, 
  0b0000000001100000, 
  0b0000000000110000, 
  0b0000000000011000, 
  0b0000000000001100, 
  0b0000000000000110,
  0b0000000000000011,
  0b0000000000000001,
  
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b1010111010001101, 
  0b0110101010011010, 
  0b0101010010011100, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000,

  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b1010111010001101, 
  0b0110101010011010, 
  0b0101010010011100, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000,
  
  0b1100000000000000,
  0b0110000000000000,
  0b0011000000000000, 
  0b0001100000000000, 
  0b0000110000000000, 
  0b0000011000000000, 
  0b0000001100000000, 
  0b0000000110000000, 
  0b0000000011000000, 
  0b0000000001100000, 
  0b0000000000110000, 
  0b0000000000011000, 
  0b0000000000001100, 
  0b0000000000000110,
  0b0000000000000011,
  0b0000000000000001, 
  0b0000000000000001,
  0b0000000000000011,
  0b0000000000000110,
  0b0000000000001100,
  0b0000000000011000, 
  0b0000000000110000, 
  0b0000000001100000, 
  0b0000000011000000, 
  0b0000000110000000, 
  0b0000001100000000, 
  0b0000011000000000, 
  0b0000110000000000, 
  0b0001100000000000, 
  0b0011000000000000, 
  0b0110000000000000, 
  0b1100000000000000,
  
  0b1100000000000000,
  0b0110000000000000,
  0b0011000000000000, 
  0b0001100000000000, 
  0b0000110000000000, 
  0b0000011000000000, 
  0b0000001100000000, 
  0b0000000110000000, 
  0b0000000011000000, 
  0b0000000001100000, 
  0b0000000000110000, 
  0b0000000000011000, 
  0b0000000000001100, 
  0b0000000000000110,
  0b0000000000000011,
  0b0000000000000001, 
  0b0000000000000001,
  0b0000000000000011,
  0b0000000000000110,
  0b0000000000001100,
  0b0000000000011000, 
  0b0000000000110000, 
  0b0000000001100000, 
  0b0000000011000000, 
  0b0000000110000000, 
  0b0000001100000000, 
  0b0000011000000000, 
  0b0000110000000000, 
  0b0001100000000000, 
  0b0011000000000000, 
  0b0110000000000000, 
  0b1100000000000000,

  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b1010100100111110, 
  0b1010110100100101, 
  0b1010101001101111,
  0b1100101111010101,
  0b1111011010101010, 
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000, 
  0b0000000000000000

};

int index = 17;
int count = sizeof(patterns)/2;
unsigned int oldy = 0;

void setup() 
{

// initialize serial communications:
Serial.begin(9600);
// initialize the pins connected to the accelerometer
// as inputs:
pinMode(xPin, INPUT);
pinMode(yPin, INPUT);
  
pinMode(latchPin, OUTPUT);
pinMode(clockPin, OUTPUT);
pinMode(dataPin, OUTPUT);

}

void loop()
{

  accelorometer();

}

void accelorometer()
{
  
// variables to read the pulse widths:
int pulseX, pulseY;
// variables to contain the resulting accelerations
int accelerationX, accelerationY;
 
// read pulse from x- and y-axes:
pulseX = pulseIn(xPin,HIGH);  
pulseY = pulseIn(yPin,HIGH);
 
// convert the pulse width into acceleration
// accelerationX and accelerationY are in milli-g's:
// earth's gravity is 1000 milli-g's, or 1g.
accelerationX = ((pulseX / 10) - 500) * 8;
accelerationY = ((pulseY / 10) - 500) * 8;

// print the acceleration
Serial.print("X: ");
Serial.print(accelerationX);
// print a tab character:
Serial.print("\t");
Serial.print("Y: ");
Serial.print(accelerationY);
Serial.println();
  
if(accelerationY == oldy){
 count = count + 1;
 if(count >= 500){
   for(int times = 0; times <= 160; times++){
    idleTime();
   }
   count = count - 50;
 } 
}else{
  count = count - 1;
  if(count <= 0){
    count = 0;
  }
}


int ywordPos = map(accelerationY, -1023, 1023, 0, 16);

byte registerOne = highByte(patterns[ywordPos]);
byte registerTwo = lowByte(patterns[ywordPos]);


digitalWrite(latchPin, LOW);
shiftOut(dataPin, clockPin, MSBFIRST, registerOne);
shiftOut(dataPin, clockPin, MSBFIRST, registerTwo);
digitalWrite(latchPin, HIGH);
  
oldy = accelerationY;


  
}

void idleTime()
{
byte registerOne = highByte(patterns[index]);
byte registerTwo = lowByte(patterns[index]);

digitalWrite(latchPin, LOW);
shiftOut(dataPin, clockPin, MSBFIRST, registerOne);
shiftOut(dataPin, clockPin, MSBFIRST, registerTwo);
digitalWrite(latchPin, HIGH);
delay(65);
index++;
if (index >= count){
index = 17;
  
}
}
